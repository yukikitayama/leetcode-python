from typing import List
import collections


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)

        colors = {}

        def dfs(node, color):
            colors[node] = color
            for neighbor, is_connected in enumerate(graph[node]):
                if is_connected == 1 and neighbor not in colors:
                    dfs(neighbor, color)

        c = 0
        for node in range(n):
            if node not in colors:
                dfs(node, c)
                c += 1

        # k: color, v: number of all nodes
        size = collections.Counter(colors.values())

        # k: color, v: number of initial nodes
        color_count = collections.Counter()
        for node in initial:
            color_count[colors[node]] += 1

        # print("colors", colors)
        # print("size", size)
        # print("color_count", color_count)

        ans = float("inf")

        for node in initial:
            c = colors[node]

            # Among nodes with a unique color in initial,
            if color_count[c] == 1:

                if ans == float("inf"):
                    ans = node

                # If we find a initial node which can remove more nodes
                elif size[c] > size[colors[ans]]:
                    ans = node

                # If there's a tie, return smallest index
                elif size[c] == size[colors[ans]] and node < ans:
                    ans = node

        # Else is when there's no node with unique color
        return ans if ans != float("inf") else min(initial)