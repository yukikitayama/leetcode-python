"""
- BFS
- Initialize
  - ans with 0
  - current steps with 0
- When BFS reaches a building, increment ans by the steps so far
  - reset steps when it reaches a building
  - reset visited set
  - reset queue
  - Replace 1 at the build cell with 2 to avoid visiting again in the next BFS
"""


from typing import List
from collections import deque


class Solution:
    def shortestDistance(self, grid: List[List[int]]) -> int:
        minDistance = float('inf')
        rows = len(grid)
        cols = len(grid[0])
        totalHouses = 0

        # Before BFS, find out how many buildings we need to reach
        for row in range(rows):
            for col in range(cols):
                if grid[row][col] == 1:
                    totalHouses += 1

        # print(f'totalHouses: {totalHouses}')

        # Do BFS starting from each empty 0 cell in grid, and update minDistance
        for row in range(rows):
            for col in range(cols):
                if grid[row][col] == 0:
                    minDistance = min(minDistance, self.bfs(grid, row, col, totalHouses))

        # If minDistance remains float('inf'), it means bfs couldn't find a path so return -1
        if minDistance == float('inf'):
            minDistance = -1

        return minDistance

    def bfs(self, grid: List[List[int]], row: int, col: int, totalHouses: int):
        dirs = [
            [1, 0],
            [-1, 0],
            [0, 1],
            [0, -1]
        ]
        rows = len(grid)
        cols = len(grid[0])
        distanceSum = 0
        housesReached = 0
        q = deque([(row, col)])

        # 2d array to keep track of which cells we've already visited to avoid visiting again
        vis = [[False] * cols for _ in range(rows)]
        vis[row][col] = True

        steps = 0

        while q and housesReached != totalHouses:

            for i in range(len(q), 0, -1):

                curr = q.popleft()
                row = curr[0]
                col = curr[1]

                if grid[row][col] == 1:
                    distanceSum += steps
                    housesReached += 1
                    # ?
                    continue

                for dir in dirs:
                    nextRow = row + dir[0]
                    nextCol = col + dir[1]

                    if 0 <= nextRow < rows and 0 <= nextCol < cols:
                        if vis[nextRow][nextCol] is False and grid[nextRow][nextCol] != 2:
                            vis[nextRow][nextCol] = True
                            q.append((nextRow, nextCol))

            steps += 1

        # If we didn't reach all houses,
        # then any cell visited in the current BFS also cannot reach all houses
        # so set the visited cell to 2 to skip them in the next BFS
        if housesReached != totalHouses:
            for row in range(rows):
                for col in range(cols):
                    if grid[row][col] == 0 and vis[row][col]:
                        grid[row][col] = 2

            return float('inf')

        return distanceSum


# Output: 7
grid = [
    [1,0,2,0,1],
    [0,0,0,0,0],
    [0,0,1,0,0]
]
# grid = [[1,0]]  # 1
grid = [[1]]  # -1
# 7220?
grid = [
    [0,0,1,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,1,0,0,0,0,1],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,2,0,0,0,2,1,0,0,0,1,0,0,0,2,1,1,0,0,0,0,0,0,0,0,2],
    [0,0,0,0,0,1,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,2,0,0,2,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,2,1,1,0],[0,0,0,1,0,0,0,1,0,0,2,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,1,1,0,0,0,0,0,2,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,2,0,1,1,0,0,0,0,2,0,1,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,2,0,0,0,2,1,1,0],[0,0,0,0,0,1,1,0,0,2,0,2,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,1,0,1,0,1,0,0,2,0,2,0,0,0],[0,2,0,0,1,1,0,0,2,0,0,0,1,2,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,2,0,0,0,1,0,0,1,1,0,2,0,0,0,0,1,1,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,0,0,0,0,1,0,1,2,0,0,0,0,2,0,1,0,0,1,0,1,2,0,0,2,0,0,0,0,0,2,1,0],[0,0,0,0,0,2,0,0,2,0,1,0,2,2,2,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,0,1,0,2,2,0,2,0,0,0,0,2,0,0,0,1,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,2,0,0,0,0,0,0,0,2,0,2,2,0,0,0,0,0,0,2,0,0,2,1,0,0,0,2,0,0,0,0,0,0,2,0],[0,1,0,0,0,2,2,0,2,2,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,2,0,1,0,1,1,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,2,0,1],[0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0],[0,0,0,0,1,0,1,2,0,1,0,0,0,2,0,0,0,0,0,1,2,1,1,1,1,0,0,0,0,0,2,0,2,0,2,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,1,2,0,0,1,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,1,0,0,2],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,2,2,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0],[0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],[0,2,1,0,2,0,0,1,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,0,1,0,0,0,0,0,0,0,0,2,0],[0,2,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,1,0,2,2,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0],[2,1,1,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],[0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,1,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[2,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,2,2,2,0,0,1,0,2,1,0,0,2,2,2,0,0,0,2,0,0,0,0,0,0,0],[0,2,2,2,0,2,0,0,1,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,2,2,1,2,0,0,0,2,1,0,0,0,0,0,0,2,0,0,2,1,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0],[2,0,0,1,1,1,0,0,0,0,0,0,0,0,0,2,1,0,0,2,0,0,0,0,0,1,0,2,0,0,0,1,0,0,0,0,2,1,0,0,0,0,0,0,0,1,0,0,0,0],[0,1,0,0,1,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,1],[0,0,2,1,0,0,1,0,0,2,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0],[1,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,1,0,2,1,0,1,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0],[0,0,0,1,0,0,0,2,0,0,0,1,0,0,1,0,1,0,0,1,2,2,0,0,0,0,0,0,0,0,0,2,0,2,0,0,1,1,0,0,0,2,0,0,0,0,2,0,1,0],[1,0,1,0,0,0,0,2,2,0,0,0,1,2,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,1,2,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0],[2,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0],[0,0,2,0,0,0,1,0,0,0,0,1,2,0,0,0,0,0,2,0,2,0,0,1,0,0,0,0,2,0,0,0,1,0,0,0,2,2,0,0,2,0,1,0,1,0,0,2,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0],[0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,2,0,1,0,0,0,0,0,0,1,0,0,0,0,0,2,0,0,0,1,0,0,2,0,0,0,0],[1,0,1,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0],[0,0,2,0,2,1,2,0,0,0,0,0,0,0,0,2,2,0,1,0,0,2,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0],[0,2,0,1,0,0,0,0,0,2,0,0,2,1,0,0,2,0,0,1,0,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,2,0,2,1,0,0,0,0,1,0,2,0,0,0],[0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,0,0,0,0,1,0,0,0,0,0,0],[0,0,2,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,2,0,0,0,1,0,0,1],[2,0,0,0,2,0,0,0,0,1,0,0,0,0,0,2,2,0,0,0,2,2,0,2,2,0,0,0,0,0,0,1,0,1,0,2,0,0,2,0,0,0,1,0,0,0,1,0,2,0],[1,2,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,2,0,0],[0,0,0,0,0,1,1,0,2,0,0,2,0,0,0,0,0,2,1,0,0,0,0,0,0,0,1,0,0,0,0,1,2,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0]]
print(Solution().shortestDistance(grid))

